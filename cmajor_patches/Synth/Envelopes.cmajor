namespace Envelopes
{
    /** A very minimal, fixed-length, attack-sustain-release envelope generator.

        This has fixed-length attach and release times. Given input events of NoteOn
        and NoteOff objects, it will emit a stream of output gain levels that can
        be used to attenuate a voice.
    */
    processor ASR

    {

        input event {

            float32 attackSecondsEvent  [[ name: "Attack", min: 0, max: 1, init: 0.1, unit: "s" ]];
            float32 releaseSecondsEvent [[ name: "Release", min: 0, max: 20, init: 0.1, unit: "s"]];
                    
        }

        input event (std::notes::NoteOn,
                     std::notes::NoteOff) noteEvent;

        output stream float gainOut;

        float keyDownVelocity, currentLevel;
        float32 attackSeconds, releaseSeconds;

        event noteEvent (std::notes::NoteOn noteOn)        { keyDownVelocity = noteOn.velocity; }
        event noteEvent (std::notes::NoteOff noteOff)      { keyDownVelocity = 0; }

        event attackSecondsEvent (float32 a) {attackSeconds = a;}
        event releaseSecondsEvent (float32 r) {releaseSeconds = r;}

        void main()
        {
            loop
            {
                while (keyDownVelocity == 0)
                    advance();

                if (attackSeconds > 0)
                {
                    let attackExponent = 1.0f / int32 (attackSeconds * float32 (processor.frequency));
                    let attackMultiplier = 2.0f ** -attackExponent
                                           * (2.0f + keyDownVelocity) ** attackExponent;

                    while (currentLevel < keyDownVelocity)
                    {
                        gainOut <- currentLevel;
                        currentLevel = attackMultiplier * (currentLevel + 2.0f) - 2.0f;
                        advance();
                    }
                }
                else
                {
                    currentLevel = keyDownVelocity;
                }

                while (keyDownVelocity != 0)
                {
                    gainOut <- currentLevel;
                    advance();
                }

                if (releaseSeconds > 0)
                {
                    let decayFactor = pow (0.0001f, float32 (processor.period) / releaseSeconds);

                    while (keyDownVelocity == 0 && currentLevel > 0.0001f)
                    {
                        gainOut <- currentLevel;
                        currentLevel *= decayFactor;
                        advance();
                    }
                }
            }
        }
    }
}
