graph SineSynth  [[main]]
{
    input event std::midi::Message midiIn;
    output stream float out;
    output modFilter.modulator.out modOut;


    input modFilter.filter.frequency; 
    input modFilter.filter.q; 


    input modFilter.modulationToFreq.modulationChange;
    input modFilter.modulator.shapeIn;//        [[ name: "Shape",         min: 0,     max: 5,     init: 0,    text: "Sine|Triangle|Square|Ramp Up|Ramp Down|Random"]];
    input modFilter.modulator.rateHzIn; //       [[ name: "Rate (Hz)",     min: 0.01,  max: 50.0,  init: 1.0,  step: 0.01,  unit: "Hz" ]];
    input modFilter.modulator.rateTempoIn; //    [[ name: "Rate (Beats)",  min: 0.001, max: 40,    init: 0,    step: 0.001, unit: "beat" ]];
    input modFilter.modulator.amplitudeIn; //    [[ name: "Amplitude",     min: 0.0,   max: 2.0,   init: 1.0,  step: 0.01 ]];
    input modFilter.modulator.offsetIn; //       [[ name: "Offset",        min: -1.0,  max: 1.0,   init: 0.0,  step: 0.01 ]];
    input modFilter.modulator.rateModeIn; //     [[ name: "Rate Mode",     min: 0,     max: 1,     init: 0,    text: "Hz|Tempo"]];
    input modFilter.modulator.syncIn; //         

    let voiceCount = 8;

    node
    {
        modFilter = ModulatedFilter;
        voices = Voice[voiceCount];
        voiceAllocator = std::voices::VoiceAllocator (voiceCount);
    }

    connection
    {
        // Convert the midi message to a our std::notes messages and forward to the voice allocator
        midiIn -> std::midi::MPEConverter -> voiceAllocator;

        // Plumb the voice allocator to the voices array
        voiceAllocator.voiceEventOut -> voices.eventIn;

        // Sum the voices audio out to the output
        voices -> modFilter.in; 
        modFilter.out -> out;

    }
}

graph Voice
{
    input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;
    output stream float out;

    node
    {
        noteToFrequency = NoteToFrequency;
        envelope = std::envelopes::FixedASR (0.01f, 0.1f);
        oscillator = std::oscillators::Sine (float32);
    }

    connection
    {
        eventIn -> noteToFrequency -> oscillator.frequencyIn;
        eventIn -> envelope.eventIn;
        (envelope.gainOut * oscillator.out) -> out;
    }
}

// graph ModulationMatrix{


// }



graph ModulatedFilter
{

    input stream float in; 
    output stream float out;

    node modulator = oscillators::LFO;
    node modulationToFreq = ModulationToFrequency; 
    node filter = std::filters (float)::tpt::svf::Processor;

    connection
    {
        modulator.out -> modulationToFreq.in;
        modulationToFreq.out -> filter.frequency;
        in -> filter.in;
        filter.out -> out;
    }
}



// Determine the note frequency from the pitch (midi note)
processor NoteToFrequency
{
    input event std::notes::NoteOn eventIn;
    output event float32 frequencyOut;

    event eventIn (std::notes::NoteOn e)
    {
        frequencyOut <- std::notes::noteToFrequency (e.pitch);
    }
}


processor ModulationToFrequency
{
    input stream float in; 
    output event float out; 
    input event float modulationChange [[ name: "Modulation Depth (Hz)",     min: 0.01,  max: 50000.0,  init: 1.0,  step: 0.01,  unit: "Hz" ]];

    float modulationAmount; 

    event modulationChange(float f){
        modulationAmount = f;
    }
    
    void main(){
        loop{
            out <- modulationAmount*in;
            advance();
        }
    }

}